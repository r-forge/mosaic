\chapter{Simulation Based Inference}


\SweaveOpts{prefix.string=figures/fig}  % location of 
\SweaveOpts{highlight=T}    % not sure this does anything unless we use pgfSweave
\SweaveOpts{tidy=F}         % keep.source probably disables this
\SweaveOpts{pdf=T}          % use pdf for graphics
\SweaveOpts{strip.white=T}  % remove blank lines at beginning and end 
\SweaveOpts{keep.source=T}  % keeps formatting from original; allows ? to work
\SweaveOpts{width=3}
\SweaveOpts{height=2}
\SweaveOpts{cache=T}


<<setup,echo=F>>=
#setCacheDir("cache")
require(grDevices); require(datasets); require(stats); require(lattice)
require(fastR)
require(grid) 
require(mosaic)
trellis.par.set(theme=col.mosaic(bw=FALSE))
trellis.par.set(fontsize=list(text=9))
options(keep.blank.line=FALSE); options(width=100)
xyplot <- function(...) { print(lattice::xyplot(...)) }
bwplot <- function(...) { print(lattice::bwplot(...)) }
histogram <- function(...) { print(lattice::histogram(...)) }
barchart <- function(...) { print(lattice::barchart(...)) }
require(vcd)
mosaic <- function(...) { print(vcd::mosaic(...)) }
@ 

\section{\texttt{mosaic} Randomization Widgets}

\subsection{Sampling and Resampling}

<<>>=
rnorm(20, mean=500, sd=100) 
rexp(20, rate=1/5)
@
<<>>=
rflip(20)
as.numeric(rflip(20))       # just count how many heads
rdata(20, 1:4)              # samples with replacement
@

<<>>=
# These are equivalent
sample(cards, 5)
deal(cards, 5)
@
<<>>=
# These are equivalent
sample(cards) 
shuffle(cards) 
@

<<>>=
# These are equivalent.  Note the order of the arguments.
sample(HELP, 2)
rdata(2, HELP)
@

<<>>=
# These are equivalent; sampling with replacement now
resample(HELP, 2)
rdata(2, HELP, replace=TRUE)
@

\subsection{\texttt{do()}}
The heart of a simulation is doing something over and over.  
The \verb!do()! function simplifies the syntax for this and improves 
the output format (usually returning a data frame).

<<>>=
do(5) * "hello"
@


\section{Empirical p-values}
\subsection{Lady Tasting Tea}
If you don't use the Lady Tasting Tea as a course starter, you can use it as 
an introduction to testing a proportion.

\subsection{Golfballs in the Yard}

<<>>=
golfballs <- c(137, 138, 107, 104) 
table( rdata(486, 1:4) )
@
<<>>=
rgolfballs <- do(2000) * table( rdata(486, 1:4) )
@


\begin{center}
<<golfballs-max,fig=true>>=
print( statTally( golfballs, rgolfballs, max ) )
@
\end{center}

\begin{center}
<<golfballs-range,fig=true,height=1.7>>=
print( statTally( golfballs, rgolfballs, function(x) { diff(range(x)) } ) )
@
\end{center}

\begin{center}
<<golfballs-var,fig=true,height=1.7>>=
print( statTally( golfballs, rgolfballs, var ) )
@
\end{center}


\subsection{Comparing Two Means}

In this section we show two ways to see if the mean ages of men and women in the HELP study 
are significantly different.

\subsubsection{Using \texttt{aggregate()}}

The \verb!aggregate()! function can compute a function on subsets of variable:
<<>>=
aggregate( age ~ sex, HELP, mean )
@
A natural test statistic for comparing two means is the difference in sample means,
which we can calculate using
<<>>=
diff(aggregate( age ~ sex, HELP, mean )$age)                    # actual
@

Using \verb!do()! and \verb!shuffle()! we can now compare
\Sexpr{round(diff(aggregate( age ~ sex, HELP, mean )$age),2)} with
the values we obtain if we randomly shuffle the \verb!sex! variable.

<<>>=
do(1) * diff(aggregate( age ~ sex, HELP, mean )$age)                      # actual
do(2) * diff(aggregate( age ~ shuffle(sex), HELP, mean )$age)             # shuffled
do(2) * c( diff=diff(aggregate( age ~ shuffle(sex), HELP, mean )$age) )   # shuffled and renamed
@


If we increase the number of random shufflings, we get an approximate sampling distribution
that we can use to compute an empirical p-value.

<<two-sample,width=4>>=
set.seed(123)
test.stat <- diff(aggregate( age ~ sex, HELP, mean )$age )
rtest.stats <- do(1000) * c(diff= diff(aggregate( age ~ shuffle(sex), HELP, mean )$age) )
rtest.stats <- rtest.stats$diff
@
<<two-sample-pval>>=
table(rtest.stats >= test.stat)
mean(rtest.stats >= test.stat)                      # compute proportion of extreme statistics
@
With an empirical p-value of approximately \Sexpr{round(mean(rtest.stats >= test.stat),3)}, there 
is no reason to reject the null hypothesis that the mean age is the same for men and women.

We can use histograms or dotplots to display the sampling distributions graphically.
\authNote{Need to improve this in mosaic package ---rjp}%
\begin{center}
<<two-sample-hist,fig=true,width=5>>=
xhistogram(~rtest.stats, v=test.stat, groups=rtest.stats >= test.stat)      
@
\end{center}

\begin{center}
<<two-sample-dot,fig=true,width=6,height=2.2>>=
test.stat <-  diff(aggregate( age ~ sex, HELP, mean )$age )
rtest.stats <- do(200) * c(diff= diff(aggregate( age ~ shuffle(sex), HELP, mean )$age) )
dotPlot(~diff, rtest.stats, n=40, groups=rtest.stats$diff >= test.stat, pch=16 )
ladd( panel.abline(v=test.stat) )                 # add a verticle line
@
\end{center}

\subsubsection{Using \texttt{lm()}}
An alternative approach to comparing two means is based on the use of linear models.  In the example below,
\R\ will automatically convert the \verb!sex! factor into 0's and 1's, so the slope parameter in the model
is the difference in the means.  
<<>>=
lm( age ~ sex, HELP )                        # actual data
@
The \verb!do()! function conveniently stores the values of the 
estimated parameters that result from fitting with \verb!lm()!, so it is relatively easy to obtain
the sampling distribution for any of these estimated parameters.
<<>>=
do(1) * lm( age ~ sex, HELP )                # actual data
do(2) * lm( age ~ shuffle(sex), HELP )       # shuffled data
@

Since this is just another way of computing the difference in the sample means, the two approaches
are equivalent.  If we reset the random seed, we get exactly the same simulation results.
<<>>=
set.seed(123)
simulated <- do(1000) * lm( age ~ shuffle(sex), HELP ) 
test.stat <- (do(1) * lm(age ~ sex, HELP) )$sexfemale -> test.stat
rtest.stats <- simulated$shufflesexfemale
table(rtest.stats >= test.stat)
mean(rtest.stats >= test.stat)
@
\authNote{Perhaps we should adjust do() so that it returns a data frame even when there is one repetition.
---rjp}
\authNote{Done. --rjp}


\section{Bootstrap Confidence Intervals}
\authNote{Should we interleave the confidence intervals and p-values or separate them like this? --rjp}%




\section{Power}
