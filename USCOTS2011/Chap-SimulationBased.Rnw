\chapter{Simulation Based Inference}


\SweaveOpts{prefix.string=figures/fig}  % location of 
\SweaveOpts{highlight=T}    % not sure this does anything unless we use pgfSweave
\SweaveOpts{tidy=F}         % keep.source probably disables this
\SweaveOpts{pdf=T}          % use pdf for graphics
\SweaveOpts{strip.white=T}  % remove blank lines at beginning and end 
\SweaveOpts{keep.source=T}  % keeps formatting from original; allows ? to work
\SweaveOpts{width=3}
\SweaveOpts{height=2}
\SweaveOpts{cache=T}

<<setup,echo=F>>=
#setCacheDir("cache")
require(grDevices); require(datasets); require(stats); require(lattice)
require(fastR)
require(grid); 
require(mosaic); 
trellis.par.set(theme=col.mosaic(bw=FALSE))
trellis.par.set(fontsize=list(text=9))
options(keep.blank.line=FALSE); options(width=100)
xyplot <- function(...) { print(lattice::xyplot(...)) }
bwplot <- function(...) { print(lattice::bwplot(...)) }
histogram <- function(...) { print(lattice::histogram(...)) }
barchart <- function(...) { print(lattice::barchart(...)) }
require(vcd)
mosaic <- function(...) { print(vcd::mosaic(...)) }
@ 

\section{\texttt{mosaic} Randomization Widgets}

\subsection{Sampling and Resampling}

<<>>=
rnorm(20, mean=500, sd=100) 
rexp(20, rate=1/5)
@
<<>>=
rflip(20)
as.numeric(rflip(20))       # just count how many heads
rdata(20, 1:4)              # samples with replacement
@

<<>>=
# These are equivalent
sample(cards, 5)
deal(cards, 5)
@
<<>>=
# These are equivalent
sample(cards) 
shuffle(cards) 
@

<<>>=
# These are equivalent.  Note the order of the arguments.
sample(HELP, 2)
rdata(2, HELP)
@

<<>>=
# These are equivalent; sampling with replacement now
resample(HELP, 2)
rdata(2, HELP, replace=TRUE)
@

\subsection{\texttt{do()}}
The heart of a simulation is doing something over and over.  
The \verb!do()! function simplifies the syntax for this and improves 
the output format (usually returning a data frame).

<<>>=
do(5) * "hello"
@


\section{Examples}
\subsection{Lady Tasting Tea}
If you don't use the Lady Tasting Tea as a course starter, you can use it as 
an introduction to testing a proportion.

\subsection{Golfballs in the Yard}

<<>>=
require(fastR)
golfballs 
table( rdata(486, 1:4) )
@
<<>>=
rgolfballs <- do(10000) * table( rdata(486, 1:4) )
@


\begin{center}
<<golfballs-max,fig=true>>=
require(fastR)
print( statTally( golfballs, rgolfballs, max ) )
@
\end{center}

\begin{center}
<<golfballs-range,fig=true,height=1.7>>=
print( statTally( golfballs, rgolfballs, function(x) { diff(range(x)) } ) )
@
\end{center}

\begin{center}
<<golfballs-var,fig=true,height=1.7>>=
print( statTally( golfballs, rgolfballs, var ) )
@
\end{center}


\subsection{Comparing Two Means}

<<>>=
lm( age ~ sex, HELP )                        # actual data
do(1) * lm( age ~ sex, HELP )                # actual data
do(2) * lm( age ~ shuffle(sex), HELP )       # shuffled data
diff(aggregate( age ~ sex, HELP, mean )$age)                    # actual
do(1) * diff(aggregate( age ~ sex, HELP, mean )$age)            # actual
do(2) * diff(aggregate( age ~ shuffle(sex), HELP, mean )$age)   # shuffled
@

\begin{center}
<<two-sample-hist,fig=true,width=4>>=
test.stat <- do(1) * diff(aggregate( age ~ sex, HELP, mean )$age)  
rtest.stats <- do(1000) * c(diff= diff(aggregate( age ~ shuffle(sex), HELP, mean )$age) )
xhistogram(~diff, rtest.stats, v=test.stat)
@
\end{center}

\begin{center}
<<two-sample-dot,fig=true,width=6,height=2.2>>=
test.stat <- do(1) * diff(aggregate( age ~ sex, HELP, mean )$age)  
rtest.stats <- do(200) * c(diff= diff(aggregate( age ~ shuffle(sex), HELP, mean )$age) )
dotPlot(~diff, rtest.stats, n=40 )
ladd( panel.abline(v=test.stat) )                 # add a verticle line
@
\end{center}



\section{Bootstrap}

Danny: We already have good-enough bootstrap tools in the
package: \texttt{do} and \texttt{resample}.  I don't do bootstrapping
early in the course, but I do talk about sampling variability from day
1.  Later on, I introduce bootstrapping as a way to simulate sampling
variability without having to collect more data.

